---
- hosts: virtual_machines
  gather_facts: true

  tasks:
    - name: Display only the operating system of the remote host
      debug:
        var: ansible_facts['os_family']

    - name: Display only the architecture of the remote host
      debug:
        var: ansible_facts['architecture']

    - name: Ensure qemu-system-arm is installed if architecture is aarch64
      ansible.builtin.apt:
        name: qemu-system-arm
        state: present
      become: true
      when: ansible_facts['architecture'] == 'aarch64'

    - name: Ensure qemu-system-x86 is installed if architecture is x86_64
      ansible.builtin.apt:
        name: qemu-system-x86
        state: present
      become: true
      when: ansible_facts['architecture'] == 'x86_64'

    - name: Ensure libvirtd/qemu and vm management packages are installed
      ansible.builtin.apt:
        name:
          - libvirt-daemon-driver-qemu
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - virtinst
          - libosinfo-bin
          - virt-manager
        state: present
        update_cache: yes
      become: true

    - name: Ensure the libvirtd service is available
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: yes

    - name: Ensure virt-lightning and its requirements are installed
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-venv
          - pkg-config
          - gcc
          - libvirt-dev
          - python3-dev
        state: present
        update_cache: yes
      become: true

    - name: Install pipx for Python package isolation
      ansible.builtin.pip:
        name: pipx
        executable: pip3
      become: true

    - name: Ensure pipx bin directory is in the PATH
      ansible.builtin.shell: |
        if ! grep -q 'PATH=$PATH:~/.local/bin' ~/.bashrc; then
          echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc
        fi
      args:
        executable: /bin/bash
      become: false
      when: ansible_env.SUDO_USER is defined or ansible_env.USER is defined

    - name: Ensure pipx is initialized (ensurepath)
      ansible.builtin.shell: pipx ensurepath
      become: false
      environment:
        PATH: "{{ ansible_env.PATH }}:~/.local/bin"

    - name: Install virt-lightning using pipx
      ansible.builtin.shell: pipx install virt-lightning
      become: false
      environment:
        PATH: "{{ ansible_env.PATH }}:~/.local/bin"

    - name: Add the executing user to appropriate groups to manage VMs
      ansible.builtin.user:
        name: "{{ ansible_env.SUDO_USER | default(ansible_env.USER) }}"
        groups:
          - libvirt
          - kvm
        append: yes
      register: user_added_to_groups
      become: true
      when: ansible_env.SUDO_USER is defined or ansible_env.USER is defined

    - name: Display all IPv4 addresses
      debug:
        var: ansible_facts['all_ipv4_addresses']

    - name: Reboot the server to apply group changes
      ansible.builtin.reboot:
      become: false
      when: user_added_to_groups.changed
