---
- hosts: virtual_machines
  gather_facts: true

  vars:
    users:
      - name: root
        ssh_keys:
          - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHGGdjHDqECI7pXnoa4FhG39XdFJsSpRbJDADhnPV3Yq ryan5163@WK1Q9J7QX6.local"
        shell: "/bin/zsh"
      - name: tool
        ssh_keys:
          - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHGGdjHDqECI7pXnoa4FhG39XdFJsSpRbJDADhnPV3Yq ryan5163@WK1Q9J7QX6.local"
        shell: "/bin/zsh"

  tasks:
    - name: Ensure the users exist
      ansible.builtin.user:
        name: "{{ item.name }}"
        shell: "{{ item.shell }}"
      loop: "{{ users }}"

    - name: Add an SSH authorized key for each user
      ansible.posix.authorized_key:
        user: "{{ item.0.name }}"
        state: present
        key: "{{ item.1 }}"
      loop: "{{ lookup('subelements', users, 'ssh_keys') }}"

    - name: Ensure the users have passwordless sudo
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ item.name }}"
        line: "{{ item.name }} ALL=(ALL) NOPASSWD:ALL"
        create: true
        validate: visudo -cf %s
        owner: root
        group: root
        mode: '0440'
      loop: "{{ users }}"

    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - bridge-utils
          - build-essential
          - ca-certificates
          - curl
          - gcc
          - git
          - libssl-dev
          - libosinfo-bin
          - libvirt-clients
          - libvirt-daemon-driver-qemu
          - libvirt-daemon-system
          - libvirt-dev
          - make
          - pkg-config
          - python3-dev
          - python3-libvirt
          - python3-pip
          - python3-setuptools
          - python3-urwid
          - python3-venv
          - software-properties-common
          - virt-manager
          - virtinst
          - virtualenv
          - wget
          - zsh
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - curl
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libffi-dev
          - liblzma-dev
          - python3-openssl
        state: present
        update_cache: true
      become: true

    - name: Ensure qemu-system-x86 is installed if architecture is x86_64
      ansible.builtin.apt:
        name: qemu-system-x86
        state: present
      become: true
      when: ansible_facts['architecture'] == 'x86_64'

    - name: Ensure qemu-system-arm is installed if architecture is aarch64
      ansible.builtin.apt:
        name: qemu-system-arm
        state: present
      become: true
      when: ansible_facts['architecture'] == 'aarch64'

    - name: Ensure the libvirtd service is available
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

    # - name: Install virt-lightning
    #   ansible.builtin.command:
    #     cmd: pip3 install --no-deps virt-lightning
    #   args:
    #     creates: /usr/local/bin/virt-lightning

    # - name: Install virt-lightnin Module for Python
    #   ansible.builtin.pip:
    #     name: virt-lightning
    #   tags:
    #     - virt-lightning

    # - name: Ensure pipx is installed for Python package isolation
    #   ansible.builtin.pip:
    #     name: pipx
    #     executable: pip3

    # - name: Ensure pipx bin directory is in the PATH for bash
    #   ansible.builtin.lineinfile:
    #     path: ~/.bashrc
    #     line: 'export PATH=$PATH:~/.local/bin'
    #     create: true
    #     state: present
    #     regexp: '^export PATH=.*~/.local/bin.*$'
    #   become: false
    #   when: ansible_env.SUDO_USER is defined or ansible_env.USER is defined

    # - name: Ensure pipx bin directory is in the PATH for zsh
    #   ansible.builtin.lineinfile:
    #     path: ~/.zshrc
    #     line: 'export PATH=$PATH:~/.local/bin'
    #     create: yes
    #     state: present
    #     regexp: '^export PATH=.*~/.local/bin.*$'
    #   become: false
    #   when: ansible_env.SUDO_USER is defined or ansible_env.USER is defined

    # - name: Ensure pipx path is in .bashrc
    #   ansible.builtin.shell: grep -q '~/.local/bin' ~/.bashrc
    #   register: bashrc_check
    #   failed_when: false
    #   changed_when: false

    # - name: Ensure pipx path is in .zshrc
    #   ansible.builtin.shell: grep -q '~/.local/bin' ~/.zshrc
    #   register: zshrc_check
    #   failed_when: false
    #   changed_when: false

    # - name: Ensure pipx is initialized (pipx ensurepath)
    #   ansible.builtin.shell: pipx ensurepath
    #   become: false
    #   environment:
    #     PATH: "{{ ansible_env.PATH }}:~/.local/bin"
    #   when: bashrc_check.rc != 0 or zshrc_check.rc != 0

    # - name: Make pipx_list to search for virt-lightning
    #   ansible.builtin.command: pipx list
    #   register: pipx_list
    #   changed_when: false

    # - name: Ensure virt-lightning is installed using pipx
    #   ansible.builtin.shell: pipx install virt-lightning
    #   environment:
    #     PATH: "{{ ansible_env.PATH }}:~/.local/bin"
    #   when: "'virt-lightning' not in pipx_list.stdout"

    # - name: Ensure virt-lightning directories exist
    #   ansible.builtin.file:
    #     path: "{{ item.path }}"
    #     state: directory
    #     mode: '0775'
    #   loop:
    #     - { path: /var/lib/virt-lightning }
    #     - { path: /var/lib/virt-lightning/pool }
    #     - { path: /var/lib/virt-lightning/pool/upstream }
    #   become: true

    # - name: Set ownership for /var/lib/virt-lightning/pool
    #   ansible.builtin.file:
    #     path: /var/lib/virt-lightning/pool
    #     state: directory
    #     owner: libvirt-qemu
    #     group: kvm
    #     recurse: true
    #   become: true

    # - name: Set ownership for /var/lib/virt-lightning/pool/upstream
    #   ansible.builtin.file:
    #     path: /var/lib/virt-lightning/pool/upstream
    #     state: directory
    #     owner: root
    #     group: root
    #     recurse: true
    #   become: true

    # - name: Fetch the Ubuntu 22.04 image
    #   ansible.builtin.command: vl fetch ubuntu-22.04
    #   args:
    #     creates: /var/lib/virt-lightning/pool/upstream/ubuntu-22.04.qcow2

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT Repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Ensure Docker service is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true
